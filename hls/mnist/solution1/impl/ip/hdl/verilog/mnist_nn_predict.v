// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mnist_nn_predict,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.588000,HLS_SYN_LAT=476633,HLS_SYN_TPT=none,HLS_SYN_MEM=137,HLS_SYN_DSP=12,HLS_SYN_FF=2282,HLS_SYN_LUT=3018,HLS_VERSION=2018_3}" *)

module mnist_nn_predict (
        ap_clk,
        ap_rst_n,
        input_r_Addr_A,
        input_r_EN_A,
        input_r_WEN_A,
        input_r_Din_A,
        input_r_Dout_A,
        input_r_Clk_A,
        input_r_Rst_A,
        output_r_Addr_A,
        output_r_EN_A,
        output_r_WEN_A,
        output_r_Din_A,
        output_r_Dout_A,
        output_r_Clk_A,
        output_r_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 132'd1;
parameter    ap_ST_fsm_state2 = 132'd2;
parameter    ap_ST_fsm_state3 = 132'd4;
parameter    ap_ST_fsm_state4 = 132'd8;
parameter    ap_ST_fsm_state5 = 132'd16;
parameter    ap_ST_fsm_state6 = 132'd32;
parameter    ap_ST_fsm_state7 = 132'd64;
parameter    ap_ST_fsm_state8 = 132'd128;
parameter    ap_ST_fsm_state9 = 132'd256;
parameter    ap_ST_fsm_state10 = 132'd512;
parameter    ap_ST_fsm_state11 = 132'd1024;
parameter    ap_ST_fsm_state12 = 132'd2048;
parameter    ap_ST_fsm_state13 = 132'd4096;
parameter    ap_ST_fsm_state14 = 132'd8192;
parameter    ap_ST_fsm_state15 = 132'd16384;
parameter    ap_ST_fsm_state16 = 132'd32768;
parameter    ap_ST_fsm_state17 = 132'd65536;
parameter    ap_ST_fsm_state18 = 132'd131072;
parameter    ap_ST_fsm_state19 = 132'd262144;
parameter    ap_ST_fsm_state20 = 132'd524288;
parameter    ap_ST_fsm_state21 = 132'd1048576;
parameter    ap_ST_fsm_state22 = 132'd2097152;
parameter    ap_ST_fsm_state23 = 132'd4194304;
parameter    ap_ST_fsm_state24 = 132'd8388608;
parameter    ap_ST_fsm_state25 = 132'd16777216;
parameter    ap_ST_fsm_state26 = 132'd33554432;
parameter    ap_ST_fsm_state27 = 132'd67108864;
parameter    ap_ST_fsm_state28 = 132'd134217728;
parameter    ap_ST_fsm_state29 = 132'd268435456;
parameter    ap_ST_fsm_state30 = 132'd536870912;
parameter    ap_ST_fsm_state31 = 132'd1073741824;
parameter    ap_ST_fsm_state32 = 132'd2147483648;
parameter    ap_ST_fsm_state33 = 132'd4294967296;
parameter    ap_ST_fsm_state34 = 132'd8589934592;
parameter    ap_ST_fsm_state35 = 132'd17179869184;
parameter    ap_ST_fsm_state36 = 132'd34359738368;
parameter    ap_ST_fsm_state37 = 132'd68719476736;
parameter    ap_ST_fsm_state38 = 132'd137438953472;
parameter    ap_ST_fsm_state39 = 132'd274877906944;
parameter    ap_ST_fsm_state40 = 132'd549755813888;
parameter    ap_ST_fsm_state41 = 132'd1099511627776;
parameter    ap_ST_fsm_state42 = 132'd2199023255552;
parameter    ap_ST_fsm_state43 = 132'd4398046511104;
parameter    ap_ST_fsm_state44 = 132'd8796093022208;
parameter    ap_ST_fsm_state45 = 132'd17592186044416;
parameter    ap_ST_fsm_state46 = 132'd35184372088832;
parameter    ap_ST_fsm_state47 = 132'd70368744177664;
parameter    ap_ST_fsm_state48 = 132'd140737488355328;
parameter    ap_ST_fsm_state49 = 132'd281474976710656;
parameter    ap_ST_fsm_state50 = 132'd562949953421312;
parameter    ap_ST_fsm_state51 = 132'd1125899906842624;
parameter    ap_ST_fsm_state52 = 132'd2251799813685248;
parameter    ap_ST_fsm_state53 = 132'd4503599627370496;
parameter    ap_ST_fsm_state54 = 132'd9007199254740992;
parameter    ap_ST_fsm_state55 = 132'd18014398509481984;
parameter    ap_ST_fsm_state56 = 132'd36028797018963968;
parameter    ap_ST_fsm_state57 = 132'd72057594037927936;
parameter    ap_ST_fsm_state58 = 132'd144115188075855872;
parameter    ap_ST_fsm_state59 = 132'd288230376151711744;
parameter    ap_ST_fsm_state60 = 132'd576460752303423488;
parameter    ap_ST_fsm_state61 = 132'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 132'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 132'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 132'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 132'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 132'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 132'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 132'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 132'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 132'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 132'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 132'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 132'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 132'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 132'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 132'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 132'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 132'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 132'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 132'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 132'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 132'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 132'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 132'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 132'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 132'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 132'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 132'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 132'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 132'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 132'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 132'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 132'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 132'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 132'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 132'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 132'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 132'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 132'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 132'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 132'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 132'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 132'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 132'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 132'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 132'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 132'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 132'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 132'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 132'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 132'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 132'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 132'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 132'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 132'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 132'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 132'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 132'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 132'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 132'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 132'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 132'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 132'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 132'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 132'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 132'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 132'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 132'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 132'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 132'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 132'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 132'd2722258935367507707706996859454145691648;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] input_r_Addr_A;
output   input_r_EN_A;
output  [3:0] input_r_WEN_A;
output  [31:0] input_r_Din_A;
input  [31:0] input_r_Dout_A;
output   input_r_Clk_A;
output   input_r_Rst_A;
output  [31:0] output_r_Addr_A;
output   output_r_EN_A;
output  [3:0] output_r_WEN_A;
output  [31:0] output_r_Din_A;
input  [31:0] output_r_Dout_A;
output   output_r_Clk_A;
output   output_r_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg input_r_EN_A;
reg output_r_EN_A;
reg[3:0] output_r_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [131:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] weight1_address0;
reg    weight1_ce0;
wire   [31:0] weight1_q0;
wire   [5:0] bias1_address0;
reg    bias1_ce0;
wire   [31:0] bias1_q0;
wire   [10:0] weight2_address0;
reg    weight2_ce0;
wire   [31:0] weight2_q0;
wire   [4:0] bias2_address0;
reg    bias2_ce0;
wire   [31:0] bias2_q0;
wire   [8:0] weight3_address0;
reg    weight3_ce0;
wire   [31:0] weight3_q0;
wire   [3:0] bias3_address0;
reg    bias3_ce0;
wire   [31:0] bias3_q0;
wire   [31:0] grp_fu_451_p2;
reg   [31:0] reg_465;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state93;
wire   [31:0] grp_fu_443_p2;
reg   [31:0] reg_470;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state117;
reg   [31:0] reg_478;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state102;
wire   [31:0] output1_q0;
reg   [31:0] reg_485;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_460_p2;
reg   [31:0] reg_490;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state113;
wire   [31:0] grp_fu_455_p2;
reg   [31:0] reg_495;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state129;
wire   [31:0] output2_q0;
reg   [31:0] reg_502;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state90;
wire   [15:0] next_mul_fu_507_p2;
reg   [15:0] next_mul_reg_791;
wire    ap_CS_fsm_state2;
wire   [6:0] k_4_fu_519_p2;
reg   [6:0] k_4_reg_799;
wire   [63:0] tmp_fu_525_p1;
reg   [63:0] tmp_reg_804;
wire   [0:0] exitcond7_fu_513_p2;
wire   [9:0] j_3_fu_535_p2;
reg   [9:0] j_3_reg_813;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_529_p2;
reg   [31:0] weight1_load_reg_833;
wire    ap_CS_fsm_state4;
reg   [31:0] input_load_reg_838;
reg   [31:0] bias1_load_reg_843;
wire    ap_CS_fsm_state12;
wire   [6:0] i_fu_567_p2;
reg   [6:0] i_reg_851;
wire    ap_CS_fsm_state18;
reg   [5:0] output1_addr_2_reg_856;
wire   [0:0] exitcond_fu_561_p2;
wire   [31:0] tmp_12_i_fu_588_p1;
wire    ap_CS_fsm_state20;
wire   [5:0] k_5_fu_599_p2;
reg   [5:0] k_5_reg_869;
wire    ap_CS_fsm_state45;
wire   [63:0] tmp_1_fu_605_p1;
reg   [63:0] tmp_1_reg_874;
wire   [0:0] exitcond5_fu_593_p2;
wire   [12:0] tmp_12_cast_fu_617_p1;
reg   [12:0] tmp_12_cast_reg_880;
wire   [6:0] j_4_fu_627_p2;
reg   [6:0] j_4_reg_888;
wire    ap_CS_fsm_state46;
wire   [0:0] exitcond4_fu_621_p2;
reg   [31:0] weight2_load_reg_908;
reg   [31:0] bias2_load_reg_913;
wire    ap_CS_fsm_state55;
wire   [5:0] i_1_fu_658_p2;
reg   [5:0] i_1_reg_921;
wire    ap_CS_fsm_state61;
reg   [4:0] output2_addr_2_reg_926;
wire   [0:0] exitcond8_fu_652_p2;
wire   [31:0] tmp_12_i1_fu_679_p1;
wire    ap_CS_fsm_state63;
wire   [3:0] k_7_fu_690_p2;
reg   [3:0] k_7_reg_939;
wire    ap_CS_fsm_state88;
wire   [63:0] tmp_8_fu_696_p1;
reg   [63:0] tmp_8_reg_944;
wire   [0:0] exitcond3_fu_684_p2;
wire   [9:0] tmp_15_cast_fu_708_p1;
reg   [9:0] tmp_15_cast_reg_950;
wire   [5:0] j_5_fu_718_p2;
reg   [5:0] j_5_reg_958;
wire    ap_CS_fsm_state89;
wire   [0:0] exitcond2_fu_712_p2;
reg   [31:0] weight3_load_reg_978;
reg   [31:0] bias3_load_reg_983;
wire    ap_CS_fsm_state98;
wire   [3:0] i_2_fu_749_p2;
reg   [3:0] i_2_reg_991;
wire    ap_CS_fsm_state104;
reg   [3:0] output3_addr_2_reg_996;
wire   [0:0] exitcond9_fu_743_p2;
wire   [31:0] output3_q0;
reg   [31:0] output3_load_1_reg_1001;
wire    ap_CS_fsm_state105;
wire   [31:0] tmp_12_i2_fu_769_p1;
wire    ap_CS_fsm_state106;
wire   [3:0] k_6_fu_780_p2;
reg   [3:0] k_6_reg_1014;
wire    ap_CS_fsm_state131;
wire   [63:0] tmp_3_fu_786_p1;
reg   [63:0] tmp_3_reg_1019;
wire   [0:0] exitcond1_fu_774_p2;
reg   [5:0] output1_address0;
reg    output1_ce0;
reg    output1_we0;
reg   [31:0] output1_d0;
reg   [4:0] output2_address0;
reg    output2_ce0;
reg    output2_we0;
reg   [31:0] output2_d0;
reg   [3:0] output3_address0;
reg    output3_ce0;
reg    output3_we0;
reg   [31:0] output3_d0;
reg   [6:0] k_reg_285;
wire    ap_CS_fsm_state17;
reg   [15:0] phi_mul_reg_296;
reg   [31:0] z1_reg_308;
reg   [9:0] j_reg_320;
reg   [6:0] i_i_reg_331;
wire    ap_CS_fsm_state44;
reg   [5:0] k_1_reg_342;
wire    ap_CS_fsm_state60;
reg   [6:0] j_1_reg_353;
reg   [31:0] z2_reg_364;
reg   [5:0] i_i9_reg_376;
wire    ap_CS_fsm_state87;
reg   [3:0] k_2_reg_387;
wire    ap_CS_fsm_state103;
reg   [5:0] j_2_reg_398;
reg   [31:0] z3_reg_409;
reg   [3:0] i_i1_reg_421;
wire    ap_CS_fsm_state130;
reg   [3:0] k_3_reg_432;
wire    ap_CS_fsm_state132;
wire   [63:0] tmp_10_cast_fu_556_p1;
wire   [63:0] tmp_4_fu_541_p1;
wire   [63:0] tmp_i_fu_573_p1;
wire   [63:0] tmp_13_cast_fu_647_p1;
wire   [63:0] tmp_s_fu_633_p1;
wire   [63:0] tmp_i1_fu_664_p1;
wire   [63:0] tmp_16_cast_fu_738_p1;
wire   [63:0] tmp_6_fu_724_p1;
wire   [63:0] tmp_i2_fu_755_p1;
wire   [31:0] input_r_Addr_A_orig;
wire   [31:0] output_r_Addr_A_orig;
reg   [31:0] grp_fu_443_p0;
reg   [31:0] grp_fu_443_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state114;
reg   [31:0] grp_fu_451_p0;
reg   [31:0] grp_fu_451_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state118;
reg   [31:0] grp_fu_460_p1;
wire   [15:0] tmp_4_cast_fu_546_p1;
wire   [15:0] tmp_9_fu_550_p2;
wire   [31:0] tmp_12_to_int_i_fu_578_p1;
wire   [31:0] tmp_12_neg_i_fu_582_p2;
wire   [11:0] tmp_10_fu_609_p3;
wire   [12:0] tmp_cast_fu_638_p1;
wire   [12:0] tmp_11_fu_642_p2;
wire   [31:0] tmp_12_to_int_i1_fu_669_p1;
wire   [31:0] tmp_12_neg_i1_fu_673_p2;
wire   [8:0] tmp_12_fu_700_p3;
wire   [9:0] tmp_6_cast_fu_729_p1;
wire   [9:0] tmp_13_fu_733_p2;
wire   [31:0] tmp_12_to_int_i2_fu_760_p1;
wire   [31:0] tmp_12_neg_i2_fu_763_p2;
reg   [131:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 132'd1;
end

mnist_nn_predict_weight1 #(
    .DataWidth( 32 ),
    .AddressRange( 50176 ),
    .AddressWidth( 16 ))
weight1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight1_address0),
    .ce0(weight1_ce0),
    .q0(weight1_q0)
);

mnist_nn_predict_bias1 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
bias1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias1_address0),
    .ce0(bias1_ce0),
    .q0(bias1_q0)
);

mnist_nn_predict_weight2 #(
    .DataWidth( 32 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
weight2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight2_address0),
    .ce0(weight2_ce0),
    .q0(weight2_q0)
);

mnist_nn_predict_bias2 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bias2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias2_address0),
    .ce0(bias2_ce0),
    .q0(bias2_q0)
);

mnist_nn_predict_weight3 #(
    .DataWidth( 32 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
weight3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight3_address0),
    .ce0(weight3_ce0),
    .q0(weight3_q0)
);

mnist_nn_predict_bias3 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
bias3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias3_address0),
    .ce0(bias3_ce0),
    .q0(bias3_q0)
);

mnist_nn_predict_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
mnist_nn_predict_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

mnist_nn_predict_output1 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
output1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output1_address0),
    .ce0(output1_ce0),
    .we0(output1_we0),
    .d0(output1_d0),
    .q0(output1_q0)
);

mnist_nn_predict_output2 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
output2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output2_address0),
    .ce0(output2_ce0),
    .we0(output2_we0),
    .d0(output2_d0),
    .q0(output2_q0)
);

mnist_nn_predict_output3 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
output3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output3_address0),
    .ce0(output3_ce0),
    .we0(output3_we0),
    .d0(output3_d0),
    .q0(output3_q0)
);

mnist_nn_predict_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mnist_nn_predict_fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_443_p0),
    .din1(grp_fu_443_p1),
    .ce(1'b1),
    .dout(grp_fu_443_p2)
);

mnist_nn_predict_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mnist_nn_predict_fmul_32ns_32ns_32_3_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_451_p0),
    .din1(grp_fu_451_p1),
    .ce(1'b1),
    .dout(grp_fu_451_p2)
);

mnist_nn_predict_fdiv_32ns_32ns_32_12_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mnist_nn_predict_fdiv_32ns_32ns_32_12_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd1065353216),
    .din1(reg_470),
    .ce(1'b1),
    .dout(grp_fu_455_p2)
);

mnist_nn_predict_fexp_32ns_32ns_32_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mnist_nn_predict_fexp_32ns_32ns_32_8_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(grp_fu_460_p1),
    .ce(1'b1),
    .dout(grp_fu_460_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_684_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
        i_i1_reg_421 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        i_i1_reg_421 <= i_2_reg_991;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        i_i9_reg_376 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        i_i9_reg_376 <= i_1_reg_921;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_i_reg_331 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        i_i_reg_331 <= i_reg_851;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        j_1_reg_353 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        j_1_reg_353 <= j_4_reg_888;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_684_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state88))) begin
        j_2_reg_398 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        j_2_reg_398 <= j_5_reg_958;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_320 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_320 <= j_3_reg_813;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        k_1_reg_342 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        k_1_reg_342 <= k_5_reg_869;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
        k_2_reg_387 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        k_2_reg_387 <= k_7_reg_939;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_743_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state104))) begin
        k_3_reg_432 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        k_3_reg_432 <= k_6_reg_1014;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        k_reg_285 <= k_4_reg_799;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_285 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        phi_mul_reg_296 <= next_mul_reg_791;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_296 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        z1_reg_308 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        z1_reg_308 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        z2_reg_364 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        z2_reg_364 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_684_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state88))) begin
        z3_reg_409 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        z3_reg_409 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bias1_load_reg_843 <= bias1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bias2_load_reg_913 <= bias2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        bias3_load_reg_983 <= bias3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        i_1_reg_921 <= i_1_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        i_2_reg_991 <= i_2_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_reg_851 <= i_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_load_reg_838 <= input_r_Dout_A;
        weight1_load_reg_833 <= weight1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_3_reg_813 <= j_3_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        j_4_reg_888 <= j_4_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        j_5_reg_958 <= j_5_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_4_reg_799 <= k_4_fu_519_p2;
        next_mul_reg_791 <= next_mul_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        k_5_reg_869 <= k_5_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state131)) begin
        k_6_reg_1014 <= k_6_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        k_7_reg_939 <= k_7_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        output1_addr_2_reg_856 <= tmp_i_fu_573_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_652_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state61))) begin
        output2_addr_2_reg_926 <= tmp_i1_fu_664_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state104))) begin
        output3_addr_2_reg_996 <= tmp_i2_fu_755_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        output3_load_1_reg_1001 <= output3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_465 <= grp_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_470 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_478 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_485 <= output1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_490 <= grp_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_495 <= grp_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state62))) begin
        reg_502 <= output2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        tmp_12_cast_reg_880[11 : 6] <= tmp_12_cast_fu_617_p1[11 : 6];
        tmp_1_reg_874[5 : 0] <= tmp_1_fu_605_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_684_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state88))) begin
        tmp_15_cast_reg_950[8 : 5] <= tmp_15_cast_fu_708_p1[8 : 5];
        tmp_8_reg_944[3 : 0] <= tmp_8_fu_696_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state131))) begin
        tmp_3_reg_1019[3 : 0] <= tmp_3_fu_786_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_804[6 : 0] <= tmp_fu_525_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        weight2_load_reg_908 <= weight2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        weight3_load_reg_978 <= weight3_q0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias1_ce0 = 1'b1;
    end else begin
        bias1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        bias2_ce0 = 1'b1;
    end else begin
        bias2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        bias3_ce0 = 1'b1;
    end else begin
        bias3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state94))) begin
        grp_fu_443_p0 = z3_reg_409;
    end else if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state51))) begin
        grp_fu_443_p0 = z2_reg_364;
    end else if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_443_p0 = reg_490;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_443_p0 = z1_reg_308;
    end else begin
        grp_fu_443_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_fu_443_p1 = bias3_load_reg_983;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_443_p1 = bias2_load_reg_913;
    end else if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_443_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_443_p1 = bias1_load_reg_843;
    end else if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_443_p1 = reg_465;
    end else begin
        grp_fu_443_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_fu_451_p0 = weight3_load_reg_978;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_451_p0 = weight2_load_reg_908;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_451_p0 = weight1_load_reg_833;
    end else begin
        grp_fu_451_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_fu_451_p1 = reg_502;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_451_p1 = reg_485;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_451_p1 = input_load_reg_838;
    end else begin
        grp_fu_451_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_460_p1 = tmp_12_i2_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_460_p1 = tmp_12_i1_fu_679_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_460_p1 = tmp_12_i_fu_588_p1;
    end else begin
        grp_fu_460_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_EN_A = 1'b1;
    end else begin
        input_r_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        output1_address0 = tmp_s_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        output1_address0 = output1_addr_2_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output1_address0 = tmp_i_fu_573_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output1_address0 = tmp_reg_804;
    end else begin
        output1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state18))) begin
        output1_ce0 = 1'b1;
    end else begin
        output1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        output1_d0 = reg_495;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output1_d0 = reg_478;
    end else begin
        output1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state17))) begin
        output1_we0 = 1'b1;
    end else begin
        output1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        output2_address0 = tmp_6_fu_724_p1;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        output2_address0 = output2_addr_2_reg_926;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        output2_address0 = tmp_i1_fu_664_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        output2_address0 = tmp_1_reg_874;
    end else begin
        output2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state61))) begin
        output2_ce0 = 1'b1;
    end else begin
        output2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        output2_d0 = reg_495;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        output2_d0 = reg_478;
    end else begin
        output2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state60))) begin
        output2_we0 = 1'b1;
    end else begin
        output2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state131)) begin
        output3_address0 = tmp_3_fu_786_p1;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        output3_address0 = output3_addr_2_reg_996;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        output3_address0 = tmp_i2_fu_755_p1;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        output3_address0 = tmp_8_reg_944;
    end else begin
        output3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state104))) begin
        output3_ce0 = 1'b1;
    end else begin
        output3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        output3_d0 = reg_495;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        output3_d0 = reg_478;
    end else begin
        output3_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state103))) begin
        output3_we0 = 1'b1;
    end else begin
        output3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        output_r_EN_A = 1'b1;
    end else begin
        output_r_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        output_r_WEN_A = 4'd15;
    end else begin
        output_r_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weight1_ce0 = 1'b1;
    end else begin
        weight1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        weight2_ce0 = 1'b1;
    end else begin
        weight2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        weight3_ce0 = 1'b1;
    end else begin
        weight3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond7_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond6_fu_529_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state18 : begin
            if (((exitcond_fu_561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state45 : begin
            if (((exitcond5_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((exitcond4_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state61 : begin
            if (((exitcond8_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state88 : begin
            if (((exitcond3_fu_684_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((exitcond2_fu_712_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state104 : begin
            if (((exitcond9_fu_743_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state104))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state131 : begin
            if (((exitcond1_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias1_address0 = tmp_reg_804;

assign bias2_address0 = tmp_1_reg_874;

assign bias3_address0 = tmp_8_reg_944;

assign exitcond1_fu_774_p2 = ((k_3_reg_432 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond2_fu_712_p2 = ((j_2_reg_398 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond3_fu_684_p2 = ((k_2_reg_387 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond4_fu_621_p2 = ((j_1_reg_353 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond5_fu_593_p2 = ((k_1_reg_342 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond6_fu_529_p2 = ((j_reg_320 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond7_fu_513_p2 = ((k_reg_285 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond8_fu_652_p2 = ((i_i9_reg_376 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond9_fu_743_p2 = ((i_i1_reg_421 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_561_p2 = ((i_i_reg_331 == 7'd64) ? 1'b1 : 1'b0);

assign i_1_fu_658_p2 = (i_i9_reg_376 + 6'd1);

assign i_2_fu_749_p2 = (i_i1_reg_421 + 4'd1);

assign i_fu_567_p2 = (i_i_reg_331 + 7'd1);

assign input_r_Addr_A = input_r_Addr_A_orig << 32'd2;

assign input_r_Addr_A_orig = tmp_4_fu_541_p1;

assign input_r_Clk_A = ap_clk;

assign input_r_Din_A = 32'd0;

assign input_r_Rst_A = ap_rst_n_inv;

assign input_r_WEN_A = 4'd0;

assign j_3_fu_535_p2 = (j_reg_320 + 10'd1);

assign j_4_fu_627_p2 = (j_1_reg_353 + 7'd1);

assign j_5_fu_718_p2 = (j_2_reg_398 + 6'd1);

assign k_4_fu_519_p2 = (k_reg_285 + 7'd1);

assign k_5_fu_599_p2 = (k_1_reg_342 + 6'd1);

assign k_6_fu_780_p2 = (k_3_reg_432 + 4'd1);

assign k_7_fu_690_p2 = (k_2_reg_387 + 4'd1);

assign next_mul_fu_507_p2 = (phi_mul_reg_296 + 16'd784);

assign output_r_Addr_A = output_r_Addr_A_orig << 32'd2;

assign output_r_Addr_A_orig = tmp_3_reg_1019;

assign output_r_Clk_A = ap_clk;

assign output_r_Din_A = output3_q0;

assign output_r_Rst_A = ap_rst_n_inv;

assign tmp_10_cast_fu_556_p1 = tmp_9_fu_550_p2;

assign tmp_10_fu_609_p3 = {{k_1_reg_342}, {6'd0}};

assign tmp_11_fu_642_p2 = (tmp_12_cast_reg_880 + tmp_cast_fu_638_p1);

assign tmp_12_cast_fu_617_p1 = tmp_10_fu_609_p3;

assign tmp_12_fu_700_p3 = {{k_2_reg_387}, {5'd0}};

assign tmp_12_i1_fu_679_p1 = tmp_12_neg_i1_fu_673_p2;

assign tmp_12_i2_fu_769_p1 = tmp_12_neg_i2_fu_763_p2;

assign tmp_12_i_fu_588_p1 = tmp_12_neg_i_fu_582_p2;

assign tmp_12_neg_i1_fu_673_p2 = (tmp_12_to_int_i1_fu_669_p1 ^ 32'd2147483648);

assign tmp_12_neg_i2_fu_763_p2 = (tmp_12_to_int_i2_fu_760_p1 ^ 32'd2147483648);

assign tmp_12_neg_i_fu_582_p2 = (tmp_12_to_int_i_fu_578_p1 ^ 32'd2147483648);

assign tmp_12_to_int_i1_fu_669_p1 = reg_502;

assign tmp_12_to_int_i2_fu_760_p1 = output3_load_1_reg_1001;

assign tmp_12_to_int_i_fu_578_p1 = reg_485;

assign tmp_13_cast_fu_647_p1 = tmp_11_fu_642_p2;

assign tmp_13_fu_733_p2 = (tmp_15_cast_reg_950 + tmp_6_cast_fu_729_p1);

assign tmp_15_cast_fu_708_p1 = tmp_12_fu_700_p3;

assign tmp_16_cast_fu_738_p1 = tmp_13_fu_733_p2;

assign tmp_1_fu_605_p1 = k_1_reg_342;

assign tmp_3_fu_786_p1 = k_3_reg_432;

assign tmp_4_cast_fu_546_p1 = j_reg_320;

assign tmp_4_fu_541_p1 = j_reg_320;

assign tmp_6_cast_fu_729_p1 = j_2_reg_398;

assign tmp_6_fu_724_p1 = j_2_reg_398;

assign tmp_8_fu_696_p1 = k_2_reg_387;

assign tmp_9_fu_550_p2 = (phi_mul_reg_296 + tmp_4_cast_fu_546_p1);

assign tmp_cast_fu_638_p1 = j_1_reg_353;

assign tmp_fu_525_p1 = k_reg_285;

assign tmp_i1_fu_664_p1 = i_i9_reg_376;

assign tmp_i2_fu_755_p1 = i_i1_reg_421;

assign tmp_i_fu_573_p1 = i_i_reg_331;

assign tmp_s_fu_633_p1 = j_1_reg_353;

assign weight1_address0 = tmp_10_cast_fu_556_p1;

assign weight2_address0 = tmp_13_cast_fu_647_p1;

assign weight3_address0 = tmp_16_cast_fu_738_p1;

always @ (posedge ap_clk) begin
    tmp_reg_804[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_1_reg_874[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_12_cast_reg_880[5:0] <= 6'b000000;
    tmp_12_cast_reg_880[12] <= 1'b0;
    tmp_8_reg_944[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_15_cast_reg_950[4:0] <= 5'b00000;
    tmp_15_cast_reg_950[9] <= 1'b0;
    tmp_3_reg_1019[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //mnist_nn_predict
