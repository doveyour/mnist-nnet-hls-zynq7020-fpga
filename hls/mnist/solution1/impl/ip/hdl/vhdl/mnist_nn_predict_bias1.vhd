-- ==============================================================
-- File generated on Mon May 10 08:06:06 CST 2021
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mnist_nn_predict_bias1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mnist_nn_predict_bias1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000001000011010011111110", 
    1 => "10111110010001100010100111011000", 
    2 => "10111110010101001111011110010101", 
    3 => "00111101101010000110100111100001", 
    4 => "00111101111101001010110011001011", 
    5 => "00111110000010111010011100100101", 
    6 => "00111101100000101010010011000000", 
    7 => "00111101011011010100000001000000", 
    8 => "10111110101100000011001110010100", 
    9 => "10111110000001110101101011111011", 
    10 => "10111110100100010000111010010110", 
    11 => "00111101101010110011000111010000", 
    12 => "10111110001011110000010001101100", 
    13 => "00111101101010100101101001000111", 
    14 => "10111110011111111001000100010000", 
    15 => "10111110011000011010111011010101", 
    16 => "10111101011100000011000000101111", 
    17 => "00111101000010110100110000010100", 
    18 => "10111110111100100101001110110110", 
    19 => "10111110011111100101111111000101", 
    20 => "10111110000101000011110101000111", 
    21 => "10111110001001011111100101000101", 
    22 => "10111101101000010010000111010100", 
    23 => "00111110011001110011000011001101", 
    24 => "00111101000011101001100011001111", 
    25 => "00111101100010100101101001010100", 
    26 => "00111101101100001100100010001010", 
    27 => "10111101100110011000101000010101", 
    28 => "10111110101101011000010110011101", 
    29 => "00111110001001011110001010011111", 
    30 => "10111100111100101110101101000101", 
    31 => "00111111000000100110011000011001", 
    32 => "00111101101101001100101110111010", 
    33 => "00111101110010111000111101011000", 
    34 => "10111110000001110111101011001110", 
    35 => "00111100110000000100111010100101", 
    36 => "10111100101101011001100000110011", 
    37 => "10111110100000011000001110000100", 
    38 => "00111110011111110100011110100010", 
    39 => "10111101111011110101000011110001", 
    40 => "10111110000000000101000001110100", 
    41 => "00111110011000000001001011011001", 
    42 => "00111110110101011010101001100111", 
    43 => "10111101101010111100011111101010", 
    44 => "10111110100101011100110001111000", 
    45 => "10111110000000011011000001000111", 
    46 => "00111110000001000100111010001101", 
    47 => "00111110011101010100100110000111", 
    48 => "00111110100111111100001010010100", 
    49 => "10111100101100001001000010001100", 
    50 => "00111110001100110000100111011100", 
    51 => "00111101010011100101011101100001", 
    52 => "00111110100100001101110010001011", 
    53 => "00111101011100011111000101111111", 
    54 => "10111101100110100011000101111100", 
    55 => "00111101111000000110000111001000", 
    56 => "00111101101100110001000000100000", 
    57 => "00111101110100001101011010100101", 
    58 => "00111101001011110001011000111000", 
    59 => "10111101011110001010011111001100", 
    60 => "10111010110111001011110100000101", 
    61 => "00111101000110001100000001010110", 
    62 => "10111110101010111111110100011010", 
    63 => "00111110001000010001011101111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mnist_nn_predict_bias1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mnist_nn_predict_bias1 is
    component mnist_nn_predict_bias1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mnist_nn_predict_bias1_rom_U :  component mnist_nn_predict_bias1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


