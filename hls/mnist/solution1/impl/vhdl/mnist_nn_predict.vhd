-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mnist_nn_predict is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_EN_A : OUT STD_LOGIC;
    input_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_Clk_A : OUT STD_LOGIC;
    input_r_Rst_A : OUT STD_LOGIC;
    output_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_EN_A : OUT STD_LOGIC;
    output_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_Clk_A : OUT STD_LOGIC;
    output_r_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mnist_nn_predict is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mnist_nn_predict,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.588000,HLS_SYN_LAT=476633,HLS_SYN_TPT=none,HLS_SYN_MEM=137,HLS_SYN_DSP=12,HLS_SYN_FF=2282,HLS_SYN_LUT=3018,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (131 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (131 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (131 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (131 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (131 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (131 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (131 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (131 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (131 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (131 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (131 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (131 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv16_310 : STD_LOGIC_VECTOR (15 downto 0) := "0000001100010000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal weight1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight1_ce0 : STD_LOGIC;
    signal weight1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias1_ce0 : STD_LOGIC;
    signal bias1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal weight2_ce0 : STD_LOGIC;
    signal weight2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias2_ce0 : STD_LOGIC;
    signal bias2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weight3_ce0 : STD_LOGIC;
    signal weight3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias3_ce0 : STD_LOGIC;
    signal bias3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal output1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal output2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal next_mul_fu_507_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_791 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_4_fu_519_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_4_reg_799 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_804 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond7_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_535_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_reg_813 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight1_load_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_load_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias1_load_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_fu_567_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_851 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal output1_addr_2_reg_856 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal k_5_fu_599_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_5_reg_869 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_1_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_874 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_cast_fu_617_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_cast_reg_880 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_4_fu_627_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_reg_888 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal exitcond4_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight2_load_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias2_load_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal i_1_fu_658_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_921 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal output2_addr_2_reg_926 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond8_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i1_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal k_7_fu_690_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_7_reg_939 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal tmp_8_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_944 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_cast_fu_708_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_cast_reg_950 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_5_fu_718_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_5_reg_958 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal exitcond2_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight3_load_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias3_load_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal i_2_fu_749_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_991 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal output3_addr_2_reg_996 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output3_load_1_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal tmp_12_i2_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal k_6_fu_780_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_6_reg_1014 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal tmp_3_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1019 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal output1_ce0 : STD_LOGIC;
    signal output1_we0 : STD_LOGIC;
    signal output1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal output2_ce0 : STD_LOGIC;
    signal output2_we0 : STD_LOGIC;
    signal output2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output3_ce0 : STD_LOGIC;
    signal output3_we0 : STD_LOGIC;
    signal output3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_285 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal phi_mul_reg_296 : STD_LOGIC_VECTOR (15 downto 0);
    signal z1_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_320 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i_reg_331 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal k_1_reg_342 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal j_1_reg_353 : STD_LOGIC_VECTOR (6 downto 0);
    signal z2_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i9_reg_376 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal k_2_reg_387 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal j_2_reg_398 : STD_LOGIC_VECTOR (5 downto 0);
    signal z3_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i1_reg_421 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal k_3_reg_432 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal tmp_10_cast_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal grp_fu_451_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal grp_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_546_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_550_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_to_int_i_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_neg_i_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_609_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_638_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_fu_642_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_to_int_i1_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_neg_i1_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_700_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_cast_fu_729_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_733_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_to_int_i2_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_neg_i2_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (131 downto 0);

    component mnist_nn_predict_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_fdiv_32ns_32ns_32_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_fexp_32ns_32ns_32_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_weight1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_bias1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_weight2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_bias2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_weight3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_bias3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_output1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_output2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_output3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_nn_predict_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    weight1_U : component mnist_nn_predict_weight1
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weight1_address0,
        ce0 => weight1_ce0,
        q0 => weight1_q0);

    bias1_U : component mnist_nn_predict_bias1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias1_address0,
        ce0 => bias1_ce0,
        q0 => bias1_q0);

    weight2_U : component mnist_nn_predict_weight2
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weight2_address0,
        ce0 => weight2_ce0,
        q0 => weight2_q0);

    bias2_U : component mnist_nn_predict_bias2
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias2_address0,
        ce0 => bias2_ce0,
        q0 => bias2_q0);

    weight3_U : component mnist_nn_predict_weight3
    generic map (
        DataWidth => 32,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weight3_address0,
        ce0 => weight3_ce0,
        q0 => weight3_q0);

    bias3_U : component mnist_nn_predict_bias3
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias3_address0,
        ce0 => bias3_ce0,
        q0 => bias3_q0);

    mnist_nn_predict_CRTL_BUS_s_axi_U : component mnist_nn_predict_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    output1_U : component mnist_nn_predict_output1
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output1_address0,
        ce0 => output1_ce0,
        we0 => output1_we0,
        d0 => output1_d0,
        q0 => output1_q0);

    output2_U : component mnist_nn_predict_output2
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output2_address0,
        ce0 => output2_ce0,
        we0 => output2_we0,
        d0 => output2_d0,
        q0 => output2_q0);

    output3_U : component mnist_nn_predict_output3
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output3_address0,
        ce0 => output3_ce0,
        we0 => output3_we0,
        d0 => output3_d0,
        q0 => output3_q0);

    mnist_nn_predict_fadd_32ns_32ns_32_4_full_dsp_1_U1 : component mnist_nn_predict_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_443_p0,
        din1 => grp_fu_443_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p2);

    mnist_nn_predict_fmul_32ns_32ns_32_3_max_dsp_1_U2 : component mnist_nn_predict_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_451_p0,
        din1 => grp_fu_451_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_451_p2);

    mnist_nn_predict_fdiv_32ns_32ns_32_12_1_U3 : component mnist_nn_predict_fdiv_32ns_32ns_32_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_470,
        ce => ap_const_logic_1,
        dout => grp_fu_455_p2);

    mnist_nn_predict_fexp_32ns_32ns_32_8_full_dsp_1_U4 : component mnist_nn_predict_fexp_32ns_32ns_32_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_460_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_460_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i1_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_684_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                i_i1_reg_421 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
                i_i1_reg_421 <= i_2_reg_991;
            end if; 
        end if;
    end process;

    i_i9_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_593_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                i_i9_reg_376 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                i_i9_reg_376 <= i_1_reg_921;
            end if; 
        end if;
    end process;

    i_i_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_331 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_i_reg_331 <= i_reg_851;
            end if; 
        end if;
    end process;

    j_1_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                j_1_reg_353 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                j_1_reg_353 <= j_4_reg_888;
            end if; 
        end if;
    end process;

    j_2_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                j_2_reg_398 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
                j_2_reg_398 <= j_5_reg_958;
            end if; 
        end if;
    end process;

    j_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_320 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_reg_320 <= j_3_reg_813;
            end if; 
        end if;
    end process;

    k_1_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_561_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                k_1_reg_342 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                k_1_reg_342 <= k_5_reg_869;
            end if; 
        end if;
    end process;

    k_2_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                k_2_reg_387 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                k_2_reg_387 <= k_7_reg_939;
            end if; 
        end if;
    end process;

    k_3_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                k_3_reg_432 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
                k_3_reg_432 <= k_6_reg_1014;
            end if; 
        end if;
    end process;

    k_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                k_reg_285 <= k_4_reg_799;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_285 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                phi_mul_reg_296 <= next_mul_reg_791;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_296 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    z1_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                z1_reg_308 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                z1_reg_308 <= grp_fu_443_p2;
            end if; 
        end if;
    end process;

    z2_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                z2_reg_364 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                z2_reg_364 <= grp_fu_443_p2;
            end if; 
        end if;
    end process;

    z3_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                z3_reg_409 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
                z3_reg_409 <= grp_fu_443_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                bias1_load_reg_843 <= bias1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                bias2_load_reg_913 <= bias2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                bias3_load_reg_983 <= bias3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                i_1_reg_921 <= i_1_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                i_2_reg_991 <= i_2_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_reg_851 <= i_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                input_load_reg_838 <= input_r_Dout_A;
                weight1_load_reg_833 <= weight1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_813 <= j_3_fu_535_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                j_4_reg_888 <= j_4_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                j_5_reg_958 <= j_5_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_4_reg_799 <= k_4_fu_519_p2;
                next_mul_reg_791 <= next_mul_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                k_5_reg_869 <= k_5_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state131)) then
                k_6_reg_1014 <= k_6_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                k_7_reg_939 <= k_7_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_561_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                output1_addr_2_reg_856 <= tmp_i_fu_573_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_652_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                output2_addr_2_reg_926 <= tmp_i1_fu_664_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_743_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                output3_addr_2_reg_996 <= tmp_i2_fu_755_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                output3_load_1_reg_1001 <= output3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_465 <= grp_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_470 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_478 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_485 <= output1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_490 <= grp_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state43))) then
                reg_495 <= grp_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state62))) then
                reg_502 <= output2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    tmp_12_cast_reg_880(11 downto 6) <= tmp_12_cast_fu_617_p1(11 downto 6);
                    tmp_1_reg_874(5 downto 0) <= tmp_1_fu_605_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    tmp_15_cast_reg_950(8 downto 5) <= tmp_15_cast_fu_708_p1(8 downto 5);
                    tmp_8_reg_944(3 downto 0) <= tmp_8_fu_696_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_774_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state131))) then
                    tmp_3_reg_1019(3 downto 0) <= tmp_3_fu_786_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_804(6 downto 0) <= tmp_fu_525_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                weight2_load_reg_908 <= weight2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                weight3_load_reg_978 <= weight3_q0;
            end if;
        end if;
    end process;
    tmp_reg_804(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_874(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_12_cast_reg_880(5 downto 0) <= "000000";
    tmp_12_cast_reg_880(12) <= '0';
    tmp_8_reg_944(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_15_cast_reg_950(4 downto 0) <= "00000";
    tmp_15_cast_reg_950(9) <= '0';
    tmp_3_reg_1019(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_513_p2, ap_CS_fsm_state3, exitcond6_fu_529_p2, ap_CS_fsm_state18, exitcond_fu_561_p2, ap_CS_fsm_state45, exitcond5_fu_593_p2, ap_CS_fsm_state46, exitcond4_fu_621_p2, ap_CS_fsm_state61, exitcond8_fu_652_p2, ap_CS_fsm_state88, exitcond3_fu_684_p2, ap_CS_fsm_state89, exitcond2_fu_712_p2, ap_CS_fsm_state104, exitcond9_fu_743_p2, ap_CS_fsm_state131, exitcond1_fu_774_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond6_fu_529_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state18 => 
                if (((exitcond_fu_561_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state45 => 
                if (((exitcond5_fu_593_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((exitcond4_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state61 => 
                if (((exitcond8_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state88 => 
                if (((exitcond3_fu_684_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                if (((exitcond2_fu_712_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state104 => 
                if (((exitcond9_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                    ap_NS_fsm <= ap_ST_fsm_state131;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state131 => 
                if (((exitcond1_fu_774_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state132;
                end if;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_CS_fsm_state131, exitcond1_fu_774_p2)
    begin
        if (((exitcond1_fu_774_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state131, exitcond1_fu_774_p2)
    begin
        if (((exitcond1_fu_774_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bias1_address0 <= tmp_reg_804(6 - 1 downto 0);

    bias1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias1_ce0 <= ap_const_logic_1;
        else 
            bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias2_address0 <= tmp_1_reg_874(5 - 1 downto 0);

    bias2_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            bias2_ce0 <= ap_const_logic_1;
        else 
            bias2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias3_address0 <= tmp_8_reg_944(4 - 1 downto 0);

    bias3_ce0_assign_proc : process(ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            bias3_ce0 <= ap_const_logic_1;
        else 
            bias3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_774_p2 <= "1" when (k_3_reg_432 = ap_const_lv4_A) else "0";
    exitcond2_fu_712_p2 <= "1" when (j_2_reg_398 = ap_const_lv6_20) else "0";
    exitcond3_fu_684_p2 <= "1" when (k_2_reg_387 = ap_const_lv4_A) else "0";
    exitcond4_fu_621_p2 <= "1" when (j_1_reg_353 = ap_const_lv7_40) else "0";
    exitcond5_fu_593_p2 <= "1" when (k_1_reg_342 = ap_const_lv6_20) else "0";
    exitcond6_fu_529_p2 <= "1" when (j_reg_320 = ap_const_lv10_310) else "0";
    exitcond7_fu_513_p2 <= "1" when (k_reg_285 = ap_const_lv7_40) else "0";
    exitcond8_fu_652_p2 <= "1" when (i_i9_reg_376 = ap_const_lv6_20) else "0";
    exitcond9_fu_743_p2 <= "1" when (i_i1_reg_421 = ap_const_lv4_A) else "0";
    exitcond_fu_561_p2 <= "1" when (i_i_reg_331 = ap_const_lv7_40) else "0";

    grp_fu_443_p0_assign_proc : process(reg_490, z1_reg_308, z2_reg_364, z3_reg_409, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state28, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state71, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state114)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            grp_fu_443_p0 <= z3_reg_409;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_fu_443_p0 <= z2_reg_364;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_443_p0 <= reg_490;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_443_p0 <= z1_reg_308;
        else 
            grp_fu_443_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_443_p1_assign_proc : process(reg_465, bias1_load_reg_843, bias2_load_reg_913, bias3_load_reg_983, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state28, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state71, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state114)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_fu_443_p1 <= bias3_load_reg_983;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_443_p1 <= bias2_load_reg_913;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_443_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_443_p1 <= bias1_load_reg_843;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_443_p1 <= reg_465;
        else 
            grp_fu_443_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_451_p0_assign_proc : process(weight1_load_reg_833, weight2_load_reg_908, weight3_load_reg_978, ap_CS_fsm_state5, ap_CS_fsm_state48, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_fu_451_p0 <= weight3_load_reg_978;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_451_p0 <= weight2_load_reg_908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_451_p0 <= weight1_load_reg_833;
        else 
            grp_fu_451_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_451_p1_assign_proc : process(reg_485, reg_502, input_load_reg_838, ap_CS_fsm_state5, ap_CS_fsm_state48, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_fu_451_p1 <= reg_502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_451_p1 <= reg_485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_451_p1 <= input_load_reg_838;
        else 
            grp_fu_451_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_460_p1_assign_proc : process(tmp_12_i_fu_588_p1, ap_CS_fsm_state20, tmp_12_i1_fu_679_p1, ap_CS_fsm_state63, tmp_12_i2_fu_769_p1, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_fu_460_p1 <= tmp_12_i2_fu_769_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_460_p1 <= tmp_12_i1_fu_679_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_460_p1 <= tmp_12_i_fu_588_p1;
        else 
            grp_fu_460_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_658_p2 <= std_logic_vector(unsigned(i_i9_reg_376) + unsigned(ap_const_lv6_1));
    i_2_fu_749_p2 <= std_logic_vector(unsigned(i_i1_reg_421) + unsigned(ap_const_lv4_1));
    i_fu_567_p2 <= std_logic_vector(unsigned(i_i_reg_331) + unsigned(ap_const_lv7_1));
    input_r_Addr_A <= std_logic_vector(shift_left(unsigned(input_r_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    input_r_Addr_A_orig <= tmp_4_fu_541_p1(32 - 1 downto 0);
    input_r_Clk_A <= ap_clk;
    input_r_Din_A <= ap_const_lv32_0;

    input_r_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_EN_A <= ap_const_logic_1;
        else 
            input_r_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    input_r_Rst_A <= ap_rst_n_inv;
    input_r_WEN_A <= ap_const_lv4_0;
    j_3_fu_535_p2 <= std_logic_vector(unsigned(j_reg_320) + unsigned(ap_const_lv10_1));
    j_4_fu_627_p2 <= std_logic_vector(unsigned(j_1_reg_353) + unsigned(ap_const_lv7_1));
    j_5_fu_718_p2 <= std_logic_vector(unsigned(j_2_reg_398) + unsigned(ap_const_lv6_1));
    k_4_fu_519_p2 <= std_logic_vector(unsigned(k_reg_285) + unsigned(ap_const_lv7_1));
    k_5_fu_599_p2 <= std_logic_vector(unsigned(k_1_reg_342) + unsigned(ap_const_lv6_1));
    k_6_fu_780_p2 <= std_logic_vector(unsigned(k_3_reg_432) + unsigned(ap_const_lv4_1));
    k_7_fu_690_p2 <= std_logic_vector(unsigned(k_2_reg_387) + unsigned(ap_const_lv4_1));
    next_mul_fu_507_p2 <= std_logic_vector(unsigned(phi_mul_reg_296) + unsigned(ap_const_lv16_310));

    output1_address0_assign_proc : process(tmp_reg_804, ap_CS_fsm_state18, output1_addr_2_reg_856, ap_CS_fsm_state46, ap_CS_fsm_state17, ap_CS_fsm_state44, tmp_i_fu_573_p1, tmp_s_fu_633_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            output1_address0 <= tmp_s_fu_633_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output1_address0 <= output1_addr_2_reg_856;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output1_address0 <= tmp_i_fu_573_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output1_address0 <= tmp_reg_804(6 - 1 downto 0);
        else 
            output1_address0 <= "XXXXXX";
        end if; 
    end process;


    output1_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state46, ap_CS_fsm_state17, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            output1_ce0 <= ap_const_logic_1;
        else 
            output1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output1_d0_assign_proc : process(reg_478, reg_495, ap_CS_fsm_state17, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output1_d0 <= reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output1_d0 <= reg_478;
        else 
            output1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output1_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output1_we0 <= ap_const_logic_1;
        else 
            output1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output2_address0_assign_proc : process(tmp_1_reg_874, ap_CS_fsm_state61, output2_addr_2_reg_926, ap_CS_fsm_state89, ap_CS_fsm_state60, ap_CS_fsm_state87, tmp_i1_fu_664_p1, tmp_6_fu_724_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            output2_address0 <= tmp_6_fu_724_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            output2_address0 <= output2_addr_2_reg_926;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            output2_address0 <= tmp_i1_fu_664_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            output2_address0 <= tmp_1_reg_874(5 - 1 downto 0);
        else 
            output2_address0 <= "XXXXX";
        end if; 
    end process;


    output2_ce0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state89, ap_CS_fsm_state60, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            output2_ce0 <= ap_const_logic_1;
        else 
            output2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output2_d0_assign_proc : process(reg_478, reg_495, ap_CS_fsm_state60, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            output2_d0 <= reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            output2_d0 <= reg_478;
        else 
            output2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output2_we0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            output2_we0 <= ap_const_logic_1;
        else 
            output2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output3_address0_assign_proc : process(tmp_8_reg_944, ap_CS_fsm_state104, output3_addr_2_reg_996, ap_CS_fsm_state131, tmp_3_fu_786_p1, ap_CS_fsm_state103, ap_CS_fsm_state130, tmp_i2_fu_755_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            output3_address0 <= tmp_3_fu_786_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            output3_address0 <= output3_addr_2_reg_996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            output3_address0 <= tmp_i2_fu_755_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            output3_address0 <= tmp_8_reg_944(4 - 1 downto 0);
        else 
            output3_address0 <= "XXXX";
        end if; 
    end process;


    output3_ce0_assign_proc : process(ap_CS_fsm_state104, ap_CS_fsm_state131, ap_CS_fsm_state103, ap_CS_fsm_state130)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            output3_ce0 <= ap_const_logic_1;
        else 
            output3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output3_d0_assign_proc : process(reg_478, reg_495, ap_CS_fsm_state103, ap_CS_fsm_state130)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            output3_d0 <= reg_495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            output3_d0 <= reg_478;
        else 
            output3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output3_we0_assign_proc : process(ap_CS_fsm_state103, ap_CS_fsm_state130)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            output3_we0 <= ap_const_logic_1;
        else 
            output3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_Addr_A <= std_logic_vector(shift_left(unsigned(output_r_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    output_r_Addr_A_orig <= tmp_3_reg_1019(32 - 1 downto 0);
    output_r_Clk_A <= ap_clk;
    output_r_Din_A <= output3_q0;

    output_r_EN_A_assign_proc : process(ap_CS_fsm_state132)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            output_r_EN_A <= ap_const_logic_1;
        else 
            output_r_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    output_r_Rst_A <= ap_rst_n_inv;

    output_r_WEN_A_assign_proc : process(ap_CS_fsm_state132)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            output_r_WEN_A <= ap_const_lv4_F;
        else 
            output_r_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    tmp_10_cast_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_550_p2),64));
    tmp_10_fu_609_p3 <= (k_1_reg_342 & ap_const_lv6_0);
    tmp_11_fu_642_p2 <= std_logic_vector(unsigned(tmp_12_cast_reg_880) + unsigned(tmp_cast_fu_638_p1));
    tmp_12_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_609_p3),13));
    tmp_12_fu_700_p3 <= (k_2_reg_387 & ap_const_lv5_0);
    tmp_12_i1_fu_679_p1 <= tmp_12_neg_i1_fu_673_p2;
    tmp_12_i2_fu_769_p1 <= tmp_12_neg_i2_fu_763_p2;
    tmp_12_i_fu_588_p1 <= tmp_12_neg_i_fu_582_p2;
    tmp_12_neg_i1_fu_673_p2 <= (tmp_12_to_int_i1_fu_669_p1 xor ap_const_lv32_80000000);
    tmp_12_neg_i2_fu_763_p2 <= (tmp_12_to_int_i2_fu_760_p1 xor ap_const_lv32_80000000);
    tmp_12_neg_i_fu_582_p2 <= (tmp_12_to_int_i_fu_578_p1 xor ap_const_lv32_80000000);
    tmp_12_to_int_i1_fu_669_p1 <= reg_502;
    tmp_12_to_int_i2_fu_760_p1 <= output3_load_1_reg_1001;
    tmp_12_to_int_i_fu_578_p1 <= reg_485;
    tmp_13_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_642_p2),64));
    tmp_13_fu_733_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_950) + unsigned(tmp_6_cast_fu_729_p1));
    tmp_15_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_700_p3),10));
    tmp_16_cast_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_733_p2),64));
    tmp_1_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_342),64));
    tmp_3_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_3_reg_432),64));
    tmp_4_cast_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_320),16));
    tmp_4_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_320),64));
    tmp_6_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_398),10));
    tmp_6_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_398),64));
    tmp_8_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_reg_387),64));
    tmp_9_fu_550_p2 <= std_logic_vector(unsigned(phi_mul_reg_296) + unsigned(tmp_4_cast_fu_546_p1));
    tmp_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_353),13));
    tmp_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_285),64));
    tmp_i1_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i9_reg_376),64));
    tmp_i2_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_421),64));
    tmp_i_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_331),64));
    tmp_s_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_353),64));
    weight1_address0 <= tmp_10_cast_fu_556_p1(16 - 1 downto 0);

    weight1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weight1_ce0 <= ap_const_logic_1;
        else 
            weight1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight2_address0 <= tmp_13_cast_fu_647_p1(11 - 1 downto 0);

    weight2_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            weight2_ce0 <= ap_const_logic_1;
        else 
            weight2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight3_address0 <= tmp_16_cast_fu_738_p1(9 - 1 downto 0);

    weight3_ce0_assign_proc : process(ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            weight3_ce0 <= ap_const_logic_1;
        else 
            weight3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
